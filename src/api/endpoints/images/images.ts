/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * VHG Tailor API
 * API documentation
 * OpenAPI spec version: 1.3
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  ImagesControllerUploadFile200,
  ImagesControllerUploadFileBody,
} from "../../model";
import { customInstance } from "../../mutator/custom-instance";

export const imagesControllerUploadFile = (
  imagesControllerUploadFileBody: ImagesControllerUploadFileBody,
) => {
  const formData = new FormData();
  if (imagesControllerUploadFileBody.files !== undefined) {
    imagesControllerUploadFileBody.files.forEach((value) =>
      formData.append("files", value),
    );
  }

  return customInstance<ImagesControllerUploadFile200>({
    url: `/images/upload`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getImagesControllerUploadFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imagesControllerUploadFile>>,
    TError,
    { data: ImagesControllerUploadFileBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof imagesControllerUploadFile>>,
  TError,
  { data: ImagesControllerUploadFileBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imagesControllerUploadFile>>,
    { data: ImagesControllerUploadFileBody }
  > = (props) => {
    const { data } = props ?? {};

    return imagesControllerUploadFile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImagesControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof imagesControllerUploadFile>>
>;
export type ImagesControllerUploadFileMutationBody =
  ImagesControllerUploadFileBody;
export type ImagesControllerUploadFileMutationError = unknown;

export const useImagesControllerUploadFile = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imagesControllerUploadFile>>,
    TError,
    { data: ImagesControllerUploadFileBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof imagesControllerUploadFile>>,
  TError,
  { data: ImagesControllerUploadFileBody },
  TContext
> => {
  const mutationOptions = getImagesControllerUploadFileMutationOptions(options);

  return useMutation(mutationOptions);
};
export const imagesControllerDeleteImage = () => {
  return customInstance<void>({ url: `/images`, method: "DELETE" });
};

export const getImagesControllerDeleteImageMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imagesControllerDeleteImage>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof imagesControllerDeleteImage>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imagesControllerDeleteImage>>,
    void
  > = () => {
    return imagesControllerDeleteImage();
  };

  return { mutationFn, ...mutationOptions };
};

export type ImagesControllerDeleteImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof imagesControllerDeleteImage>>
>;

export type ImagesControllerDeleteImageMutationError = unknown;

export const useImagesControllerDeleteImage = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imagesControllerDeleteImage>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof imagesControllerDeleteImage>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getImagesControllerDeleteImageMutationOptions(options);

  return useMutation(mutationOptions);
};
