/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * VHG Tailor API
 * API documentation
 * OpenAPI spec version: 1.3
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { UserUpdateDTO, UsersResponseDto } from "../../model";
import { customInstance } from "../../mutator/custom-instance";

export const usersControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<UsersResponseDto>({
    url: `/users`,
    method: "GET",
    signal,
  });
};

export const getUsersControllerFindAllQueryKey = () => {
  return [`/users`] as const;
};

export const getUsersControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersControllerFindAll>>
  > = ({ signal }) => usersControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = unknown;

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof usersControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUsersControllerFindAll<
  TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersControllerFindAll>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersControllerUpdateUser = (userUpdateDTO: UserUpdateDTO) => {
  return customInstance<void>({
    url: `/users`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: userUpdateDTO,
  });
};

export const getUsersControllerUpdateUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    TError,
    { data: UserUpdateDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>,
  TError,
  { data: UserUpdateDTO },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    { data: UserUpdateDTO }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerUpdateUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>
>;
export type UsersControllerUpdateUserMutationBody = UserUpdateDTO;
export type UsersControllerUpdateUserMutationError = unknown;

export const useUsersControllerUpdateUser = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateUser>>,
    TError,
    { data: UserUpdateDTO },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdateUser>>,
  TError,
  { data: UserUpdateDTO },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usersControllerDeleteUser = (id: string) => {
  return customInstance<void>({
    url: `/users/${encodeURIComponent(String(id))}`,
    method: "DELETE",
  });
};

export const getUsersControllerDeleteUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return usersControllerDeleteUser(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerDeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>
>;

export type UsersControllerDeleteUserMutationError = unknown;

export const useUsersControllerDeleteUser = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerDeleteUser>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUsersControllerDeleteUserMutationOptions(options);

  return useMutation(mutationOptions);
};
