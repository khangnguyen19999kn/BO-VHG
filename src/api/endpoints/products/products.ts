/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * VHG Tailor API
 * API documentation
 * OpenAPI spec version: 1.3
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateProductDto,
  ProductsControllerFindByTypeParams,
  TResponse,
  TResponseFindAllType,
  TResponseFindOne,
} from "../../model";
import { customInstance } from "../../mutator/custom-instance";

export const productsControllerFindAll = (signal?: AbortSignal) => {
  return customInstance<TResponse>({ url: `/products`, method: "GET", signal });
};

export const getProductsControllerFindAllQueryKey = () => {
  return [`/products`] as const;
};

export const getProductsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindAll>>
  > = ({ signal }) => productsControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindAll>>
>;
export type ProductsControllerFindAllQueryError = unknown;

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAll>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindAll<
  TData = Awaited<ReturnType<typeof productsControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAll>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerCreate = (
  createProductDto: CreateProductDto,
) => {
  return customInstance<void>({
    url: `/products`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createProductDto,
  });
};

export const getProductsControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    { data: CreateProductDto }
  > = (props) => {
    const { data } = props ?? {};

    return productsControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerCreate>>
>;
export type ProductsControllerCreateMutationBody = CreateProductDto;
export type ProductsControllerCreateMutationError = unknown;

export const useProductsControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const mutationOptions = getProductsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const productsControllerFindOne = (
  slug: string,
  signal?: AbortSignal,
) => {
  return customInstance<TResponseFindOne>({
    url: `/products/detail/${encodeURIComponent(String(slug))}`,
    method: "GET",
    signal,
  });
};

export const getProductsControllerFindOneQueryKey = (slug: string) => {
  return [`/products/detail/${slug}`] as const;
};

export const getProductsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = unknown,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindOneQueryKey(slug);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindOne>>
  > = ({ signal }) => productsControllerFindOne(slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!slug,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindOne>>
>;
export type ProductsControllerFindOneQueryError = unknown;

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = unknown,
>(
  slug: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = unknown,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindOne>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = unknown,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindOne<
  TData = Awaited<ReturnType<typeof productsControllerFindOne>>,
  TError = unknown,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindOneQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerFindNew = (signal?: AbortSignal) => {
  return customInstance<TResponse>({
    url: `/products/new`,
    method: "GET",
    signal,
  });
};

export const getProductsControllerFindNewQueryKey = () => {
  return [`/products/new`] as const;
};

export const getProductsControllerFindNewQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindNew>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindNew>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductsControllerFindNewQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindNew>>
  > = ({ signal }) => productsControllerFindNew(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindNew>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindNewQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindNew>>
>;
export type ProductsControllerFindNewQueryError = unknown;

export function useProductsControllerFindNew<
  TData = Awaited<ReturnType<typeof productsControllerFindNew>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindNew>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindNew>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindNew<
  TData = Awaited<ReturnType<typeof productsControllerFindNew>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindNew>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindNew>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindNew<
  TData = Awaited<ReturnType<typeof productsControllerFindNew>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindNew>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindNew<
  TData = Awaited<ReturnType<typeof productsControllerFindNew>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindNew>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindNewQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerFindAllTypeOfProduct = (
  signal?: AbortSignal,
) => {
  return customInstance<TResponseFindAllType>({
    url: `/products/type`,
    method: "GET",
    signal,
  });
};

export const getProductsControllerFindAllTypeOfProductQueryKey = () => {
  return [`/products/type`] as const;
};

export const getProductsControllerFindAllTypeOfProductQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getProductsControllerFindAllTypeOfProductQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>
  > = ({ signal }) => productsControllerFindAllTypeOfProduct(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindAllTypeOfProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>
>;
export type ProductsControllerFindAllTypeOfProductQueryError = unknown;

export function useProductsControllerFindAllTypeOfProduct<
  TData = Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAllTypeOfProduct<
  TData = Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindAllTypeOfProduct<
  TData = Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindAllTypeOfProduct<
  TData = Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productsControllerFindAllTypeOfProduct>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getProductsControllerFindAllTypeOfProductQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerFindByType = (
  type: string,
  params?: ProductsControllerFindByTypeParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/products/${encodeURIComponent(String(type))}`,
    method: "GET",
    params,
    signal,
  });
};

export const getProductsControllerFindByTypeQueryKey = (
  type: string,
  params?: ProductsControllerFindByTypeParams,
) => {
  return [`/products/${type}`, ...(params ? [params] : [])] as const;
};

export const getProductsControllerFindByTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof productsControllerFindByType>>,
  TError = unknown,
>(
  type: string,
  params?: ProductsControllerFindByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindByType>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getProductsControllerFindByTypeQueryKey(type, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productsControllerFindByType>>
  > = ({ signal }) => productsControllerFindByType(type, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!type,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productsControllerFindByType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductsControllerFindByTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerFindByType>>
>;
export type ProductsControllerFindByTypeQueryError = unknown;

export function useProductsControllerFindByType<
  TData = Awaited<ReturnType<typeof productsControllerFindByType>>,
  TError = unknown,
>(
  type: string,
  params: undefined | ProductsControllerFindByTypeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindByType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindByType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindByType<
  TData = Awaited<ReturnType<typeof productsControllerFindByType>>,
  TError = unknown,
>(
  type: string,
  params?: ProductsControllerFindByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindByType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsControllerFindByType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductsControllerFindByType<
  TData = Awaited<ReturnType<typeof productsControllerFindByType>>,
  TError = unknown,
>(
  type: string,
  params?: ProductsControllerFindByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindByType>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductsControllerFindByType<
  TData = Awaited<ReturnType<typeof productsControllerFindByType>>,
  TError = unknown,
>(
  type: string,
  params?: ProductsControllerFindByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productsControllerFindByType>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductsControllerFindByTypeQueryOptions(
    type,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productsControllerUpdate = (
  id: string,
  createProductDto: CreateProductDto,
) => {
  return customInstance<void>({
    url: `/products/${encodeURIComponent(String(id))}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createProductDto,
  });
};

export const getProductsControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: CreateProductDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: CreateProductDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    { id: string; data: CreateProductDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return productsControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerUpdate>>
>;
export type ProductsControllerUpdateMutationBody = CreateProductDto;
export type ProductsControllerUpdateMutationError = unknown;

export const useProductsControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerUpdate>>,
    TError,
    { id: string; data: CreateProductDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerUpdate>>,
  TError,
  { id: string; data: CreateProductDto },
  TContext
> => {
  const mutationOptions = getProductsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const productsControllerDelete = (id: string) => {
  return customInstance<void>({
    url: `/products/${encodeURIComponent(String(id))}`,
    method: "DELETE",
  });
};

export const getProductsControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productsControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productsControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return productsControllerDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductsControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof productsControllerDelete>>
>;

export type ProductsControllerDeleteMutationError = unknown;

export const useProductsControllerDelete = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productsControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof productsControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getProductsControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
